Note to the reviewer: Please be brutal! I take criticism well and 
     if you fix my code you are only helping me improve my skills :-)

Algorithm goals:
    The following algorithm will de-multiplex four input FASTQ files 
    2 with biological reads:
    1294_S1_L008_R1_001.fastq.gz
    1294_S1_L008_R4_001.fastq.gz

    and 2 with index reads:
    1294_S1_L008_R2_001.fastq.gz
    1294_S1_L008_R3_001.fastq.gz

    and will output:
    <one R1 FASTQ file and one R2 FASTQ file per matching index-pair *this means there should be 48 files like this**>
    <another two FASTQ files for non-matching index-pairs (index-hopping)> and
    <two additional FASTQ files when one or both index reads are unknown or low quality>

    The algorithm will report:
    the number of read-pairs with properly matched indexes (per index-pair),
    the number of read pairs with index-hopping observed, and
    the number of read-pairs with unknown index(es).

start algorith:

Use argparse to set input filenames
import modules
init global variables
init 4 lists: 1 for each input file
init and populate list of indexes from txt file on talapas

while true loop to open 4 files as rt  
    Read and strip header line
    Read and strip sequence line
    Read and strip plus line
    Read and strip quality score line
        store values in appropriate list (need header, seq, qual for R1,R4; need seq, qual for R2, R3)

    If R2 sequence/index has N base 
        call function: write to unknown file 
        increase unknown counter
    If R3 sequence/index has N base 
        call function: write to unknown file 
        increase unknown counter
    Call reverse complement module from bioinfo.py 
        reverse complement header in R3
    Check for match between R2 and R3 headers
        If R2 does NOT match R3
             write to index hopped file
                 append index1 and index2 to header line for R1 and R4
                 write all 4 lines of R1 or R4 to the respective unknown file
             increase index hopped counter
        If R2 DOES match R3
             Check quality scores - if R2 mean quality score <= 32 #low tolerance for index Q score
                  call function: write to unknown file
                  increase unknown counter
             Check quality scores - if R3 mean quality score <= 32 #low tolerance for index Q score
                  call function: write to unknown file
                  increase unknown counter
             Check quality scores - if R1 mean quality score <= 30 #more lenient for read Q score
                  call function: write to unknown file
                  increase unknown counter
             Check quality scores - if R1 mean quality score <= 30 #more lenient for read Q score
                  call function: write to unknown file
                  increase unknown counter
             ```everything left in the 4 files is a good index/read```
             write to R1 or R2 index file
                  append index1 and index2 to header line for R1 and R4
                  write all 4 lines of R1 or R4 to the respective known index file using dictionary key as filename
             increase proper match counter


write to unknown file function goes here (**maybe? see assertions below)
     append index1 and index2 to header line for R1 and R4
     write all 4 lines of R1 or R4 to the respective unknown file
def write_unknown(str) -> str:
     '''this function will append R2 and R3 index values stored in list to header value also 
     stored in list. Then will pass header and sequence stored from list to write command, appending
     the header and sequence to the end of the unknown file'''
assert reverse_complement("it's entirely possible that this is a bad idea and I should just use
     the script several times rather than try and make it a function")
assert reverse complement("I'm saying this because I can't think of what I would pass the function")

need to write reverse complement function and add to bioinfo.py
     input string, read from back of string(?)
     return complementary base of whatever is input (use dict?)
          A:T,T:A,C:G,G:C,N:N
def reverse_complement(str) -> str:
    '''reads sequence of nuceotides and returns their complementary sequence'''
    return revcomp
assert reverse_complement("ACT") == AGT
assert reverse_complement("NAG") == CTN

return counters
return output filenames

end_algorithm_ike_sanderson
